#!/usr/bin/env php
<?php

/*
 * Turns CPD based XML-Reports into Github Pull Request Annotations via the
 Checks API. This script is meant for use within your GithubAction.
 *
 * (c) Mridang Agarwalla <mridang.agarwalla@gmail.com>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 *
 * https://github.com/mridang/cpd-annotations
 */

error_reporting(E_ALL);
ini_set('display_errors', 'stderr');
gc_disable();

$version = '0.0.1';

// options
$colorize = false;
$gracefulWarnings = false;

// parameters
$params = [];
foreach ($argv as $arg) {
    if (substr($arg, 0, 2) === '--') {
        $option = substr($arg, 2);
        switch ($option) {
        case 'graceful-warnings':
            $gracefulWarnings = true;
            break;
        case 'colorize':
            $colorize = true;
            break;
        default:
            echo "Unknown option ".$option."\n";
            exit(9);
        }
    } else {
        $params[] = $arg;
    }
}

if (count($params) === 1) {
    $xml = stream_get_contents(STDIN);
} elseif (count($params) === 2 && file_exists($params[1])) {
    $xml = file_get_contents($params[1]);
} else {
    echo "cpd2pr $version\n";
    echo "Annotate a Github Pull Request based on a CPD XML-report.\n";
    echo "Usage: ". $params[0] ." [OPTION]... <filename>\n";
    echo "\n";
    echo "Supported options:\n";
    echo "  --graceful-warnings   Don't exit with error codes if there are only warnings.\n";
    echo "  --colorize            Colorize the output (still compatible with Github Annotations)\n";
    exit(9);
}

// enable user error handling
libxml_use_internal_errors(true);

$root = @simplexml_load_string($xml);

if ($root === false) {
    $errors = libxml_get_errors();
    if ($errors) {
        fwrite(STDERR, 'Error: '. rtrim($errors[0]->message).' on line '.$errors[0]->line.', column '.$errors[0]->column ."\n\n");
    } elseif (stripos($xml, '<?xml') !== 0) {
        fwrite(STDERR, 'Error: Expecting xml stream starting with a xml opening tag.' ."\n\n");
    } else {
        fwrite(STDERR, 'Error: Unknown error. Expecting CPD formatted xml input.' ."\n\n");
    }
    fwrite(STDERR, $xml);

    exit(2);
}

$exit = 0;

foreach ($root as $duplication) {
    $duplicateLines = (string)$duplication['lines'];

    $firstPath = relativePath((string)$duplication->file[0]['path']);
    $firstLine = (string)$duplication->file[0]['line'];

    $secondPath = relativePath((string)$duplication->file[1]['path']);
    $secondLine = (string)$duplication->file[1]['line'];

    $firstMessage = "Found " . $duplicateLines . " duplicated lines in " . $secondPath;
    annotateViolation('warning', relativePath($firstPath), $firstLine, $firstMessage, $colorize);

    $SecondMessage = "Found " . $duplicateLines . " duplicated lines in " . $firstPath;
    annotateViolation('warning', relativePath($secondPath), $secondLine, $SecondMessage, $colorize);
}

exit($exit);

/**
 * @param 'error'|'warning' $type
 * @param string $filename
 * @param int $line
 * @param string $message
 * @param boolean $colorize
 */
function annotateViolation($type, $filename, $line, $message, $colorize)
{
    if ($colorize) {
        echo "\033[".($type==='error' ? '91' : '93')."m\n";
    }
    echo "::{$type} file={$filename},line={$line}::{$message}\n";
    if ($colorize) {
        echo "\033[0m";
    }
}

function relativePath($path)
{
    return str_replace(getcwd().'/', '', $path);
}

function annotateType($type)
{
    return in_array($type, ['error', 'failure']) ? 'error' : 'warning';
}
